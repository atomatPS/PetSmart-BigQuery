############### Total (not broken out in any way)
##################################################################


DECLARE opti_campaign STRING;
DECLARE opti_experiment STRING;
DECLARE Control_ID_US STRING;
DECLARE Variant_ID_US STRING;
DECLARE Control_ID_CA STRING;
DECLARE Variant_ID_CA STRING;
DECLARE Start_Date STRING;
DECLARE End_Date STRING;

DECLARE Control_n int64;
DECLARE Control_mean int64;
DECLARE Control_sd int64;
DECLARE Variant_n int64;
DECLARE Variant_mean int64;
DECLARE Variant_sd int64;




#######################################################
########### This is what needs to be edited ########### 
#######################################################

SET opti_campaign = '50% M4 Traffic Monitoring'; ## If no campaign --- put "no personalization"
SET opti_experiment = 'Legacy'; ## Will have to change this to legacy or replatform depending
SET Control_ID_US = '30122530594'; ## If there is no US or CA Control version just put the same ID for both
SET Variant_ID_US = '30189170384'; ## If there is no US or CA Variant version just put the same ID for both
SET Control_ID_CA = '30122530594';
SET Variant_ID_CA = '30189170384';
SET Start_Date = '20240818';
SET End_Date = '20240818';

############################################################################################
############################################################################################


###############################
########### Variant ###########
###############################

SELECT 
COUNT(*) as Variant_n,
avg(US_revenue) as Variant_Revenue_mean,
stddev(US_revenue) as Variant_Revenue_sd,
avg(Conversion) as Variant_CVR_mean,
stddev(Conversion) as Variant_CVR_sd
from(
SELECT 
*, ROW_NUMBER() OVER(PARTITION BY US_opti_user_id) as rn
from(
with US as (
SELECT 
opti_date as US_opti_date,
opti_event as US_opti_event,
opti_user_id as US_opti_user_id,
optimizely_variation as US_optimizely_variation,
optimizely_experiment as US_optimizely_experiment,
IFNULL(revenue,0) AS US_revenue,
CASE WHEN revenue > 0 then 1 ELSE 0 END as Conversion
from(
with opti_users as (
  SELECT * 
  from(
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY opti_user_id) as rn
  from(
    SELECT 
    event_date as opti_date,
    event_name as opti_event,
    user_pseudo_id as opti_user_id,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_variation') AS optimizely_variation,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_campaign') AS optimizely_campaign,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_experiment') AS optimizely_experiment
  from `petsmart-web-ecom.analytics_287660050.events_*` WHERE _TABLE_SUFFIX between Start_Date and End_Date AND  event_name = 'optimizely_decision_web'
  )
  WHERE regexp_contains(optimizely_campaign, opti_campaign) 
    AND regexp_contains(optimizely_experiment, opti_experiment)
    AND regexp_contains(optimizely_variation, Variant_ID_US) 
  )
  WHERE rn = 1
),
purch_users as(
  SELECT 
  event_date as purch_date,
  event_name as purch_event,
  user_pseudo_id as purch_user_id,
  sum(ecommerce.purchase_revenue) as revenue
  from `petsmart-web-ecom.analytics_287660050.events_*` WHERE _TABLE_SUFFIX between Start_Date and End_Date AND  event_name = 'purchase'
  group by 1,2,3
)
SELECT * from opti_users
left join purch_users on opti_user_id = purch_user_id
)
),
CA as (
SELECT 
opti_date as CA_opti_date,
opti_event as CA_opti_event,
opti_session_id as CA_opti_user_id,
optimizely_variation as CA_optimizely_variation,
optimizely_experiment as CA_optimizely_experiment,
IFNULL(revenue,0) AS US_revenue,
CASE WHEN revenue > 0 then 1 ELSE 0 END as Conversion
from(
with opti_users as (
 SELECT * 
  from(
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY opti_user_id) as rn
  from(
    SELECT 
    event_date as opti_date,
    event_name as opti_event,
    user_pseudo_id as opti_user_id,
    concat(user_pseudo_id,(select value.int_value from unnest(event_params) where key = 'ga_session_id')) as opti_session_id,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_variation') AS optimizely_variation,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_campaign') AS optimizely_campaign,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_experiment') AS optimizely_experiment
  from `petsmart-web-ecom.analytics_339409281.events_*` WHERE _TABLE_SUFFIX between Start_Date and End_Date AND  event_name = 'optimizely_decision_web'
  )
  WHERE regexp_contains(optimizely_campaign, opti_campaign) 
    AND regexp_contains(optimizely_experiment, opti_experiment)
    AND regexp_contains(optimizely_variation, Variant_ID_CA) 
  )
  WHERE rn = 1
),
purch_users as(
  SELECT 
  event_date as purch_date,
  event_name as purch_event,
  user_pseudo_id as purch_user_id,
  sum(ecommerce.purchase_revenue) as revenue
  from `petsmart-web-ecom.analytics_339409281.events_*` WHERE _TABLE_SUFFIX between Start_Date and End_Date AND  event_name = 'purchase'
  group by 1,2,3
) 
SELECT * from opti_users 
left join purch_users on opti_user_id = purch_user_id
)  
)
SELECT * from US
UNION ALL
SELECT * from CA
)
) where rn = 1;

############################################################################################
############################################################################################

###############################
########### Control ###########
###############################
SELECT 
COUNT(*) as Control_n,
avg(US_revenue) as Control_Revenue_mean,
stddev(US_revenue) as Control_Revenue_sd,
avg(Conversion) as Control_CVR_mean,
stddev(Conversion) as Control_CVR_sd
from(
  SELECT 
*, ROW_NUMBER() OVER(PARTITION BY US_opti_user_id) as rn
from(
with US as (
SELECT 
opti_date as US_opti_date,
opti_event as US_opti_event,
opti_user_id as US_opti_user_id,
optimizely_variation as US_optimizely_variation,
optimizely_experiment as US_optimizely_experiment,
IFNULL(revenue,0) AS US_revenue,
CASE WHEN revenue > 0 then 1 ELSE 0 END as Conversion
from(
with opti_users as (
  SELECT * 
  from(
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY opti_user_id) as rn
  from(
    SELECT 
    event_date as opti_date,
    event_name as opti_event,
    user_pseudo_id as opti_user_id,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_variation') AS optimizely_variation,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_campaign') AS optimizely_campaign,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_experiment') AS optimizely_experiment
  from `petsmart-web-ecom.analytics_287660050.events_*` WHERE _TABLE_SUFFIX between Start_Date and End_Date AND  event_name = 'optimizely_decision_web'
  )
  WHERE regexp_contains(optimizely_campaign, opti_campaign) 
    AND regexp_contains(optimizely_experiment, opti_experiment)
    AND regexp_contains(optimizely_variation, Control_ID_US)
  )
  WHERE rn = 1
),
purch_users as(
  SELECT 
  event_date as purch_date,
  event_name as purch_event,
  user_pseudo_id as purch_user_id,
  ecommerce.purchase_revenue as revenue
  from `petsmart-web-ecom.analytics_287660050.events_*` WHERE _TABLE_SUFFIX between Start_Date and End_Date AND  event_name = 'purchase'
)
SELECT * from opti_users 
left join purch_users on opti_user_id = purch_user_id
)
),
CA as (
SELECT 
opti_date as CA_opti_date,
opti_event as CA_opti_event,
opti_user_id as CA_opti_user_id,
optimizely_variation as CA_optimizely_variation,
optimizely_experiment as CA_optimizely_experiment,
IFNULL(revenue,0) AS US_revenue,
CASE WHEN revenue > 0 then 1 ELSE 0 END as Conversion
from(
with opti_users as (
  SELECT * 
  from(
    SELECT *,
    ROW_NUMBER() OVER(PARTITION BY opti_user_id) as rn
  from(
    SELECT 
    event_date as opti_date,
    event_name as opti_event,
    user_pseudo_id as opti_user_id,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_variation') AS optimizely_variation,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_campaign') AS optimizely_campaign,
    (SELECT value.string_value FROM UNNEST (event_params) WHERE key = 'optimizely_experiment') AS optimizely_experiment
  from `petsmart-web-ecom.analytics_339409281.events_*` WHERE _TABLE_SUFFIX between Start_Date and End_Date AND  event_name = 'optimizely_decision_web'
  )
 WHERE regexp_contains(optimizely_campaign, opti_campaign) 
  AND regexp_contains(optimizely_experiment, opti_experiment)
  AND regexp_contains(optimizely_variation, Control_ID_CA) 
  )
  WHERE rn = 1
),
purch_users as(
  SELECT 
  event_date as purch_date,
  event_name as purch_event,
  user_pseudo_id as purch_user_id,
  ecommerce.purchase_revenue as revenue
  from `petsmart-web-ecom.analytics_339409281.events_*` WHERE _TABLE_SUFFIX between Start_Date and End_Date AND  event_name = 'purchase'
)
SELECT * from opti_users 
left join purch_users on opti_user_id = purch_user_id
)  
)
SELECT * from US
UNION ALL
SELECT * from CA
)
)where rn = 1;
